# SPDX-FileCopyrightText: 2025 Deutsche Telekom AG
#
# SPDX-License-Identifier: Apache-2.0

name: Build image

# Builds and pushes an image
# Images will be tagged:
# - with "latest" if built on the main branch
# - with "<branch slug>-<run id>" if built in a PR
# - with the tag if built on tag
# - with the provided tag if dispatched manually

# Required variables:
# - REGISTRY_HOST: e.g. mtr.devops.telekom.de
# - REGISTRY_REPO: e.g. /tardis-internal/gateway/rotator
# - REGISTRY_AUTH_USER: Name of MTR robot user

# Required secrets:
# - REGISTRY_AUTH_TOKEN: Name of MTR robot token

on:
  pull_request:
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag for this build"
        type: string
  push:
    branches:
      - main
    tags:

permissions:
  contents: read

jobs:
  build-push-image:
    name: Build & push
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build-push.outputs.digest }}
      image-tag: ${{ steps.build-push.outputs.image-digest }}
    steps:
      - name: Inject slug vars
        uses: rlespinasse/github-slug-action@v5
      - name: Determine tag
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "This workflow was triggered by workflow_dispatch."
            export TAG=${{ github.event.inputs.tag }}
          else
            if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              echo "This workflow was triggered by a tag push ${GITHUB_REF}"
              export TAG=$(echo ${GITHUB_REF} | sed 's|^refs/tags/v||')
            else
              if [[ "${GITHUB_REF_POINT_SLUG}" == "main" ]]; then
                export TAG="latest"
              else
                export TAG=${GITHUB_REF_POINT_SLUG}-${GITHUB_RUN_ID}
              fi
            fi
          fi
          echo "Image tag will be: ${TAG}"
          echo "image-tag=${TAG}" >> "${GITHUB_OUTPUT}"
      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY_HOST }}
          username: ${{ vars.REGISTRY_AUTH_USER }}
          password: ${{ secrets.REGISTRY_AUTH_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        id: build-push
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_SUMMARY: false
        with:
          tags: ${{ vars.REGISTRY_HOST }}${{ vars.REGISTRY_REPO }}:${{ steps.tag.outputs.image-tag }}
          cache-from: type=registry,ref=${{ vars.REGISTRY_HOST }}${{ vars.REGISTRY_REPO }}:latest
          cache-to: type=inline
          push: true
          platforms: linux/amd64,linux/arm64

  scan-image:
    name: Vulnerability scan
    runs-on: ubuntu-latest
    needs:
      - build-push-image
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        env:
          TRIVY_USERNAME: ${{ vars.REGISTRY_AUTH_USER }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_AUTH_TOKEN }}
        with:
          image-ref: '${{ vars.REGISTRY_HOST }}${{ vars.REGISTRY_REPO }}@${{ needs.build-push-image.outputs.image-digest }}'
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
